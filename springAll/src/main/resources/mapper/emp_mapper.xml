<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dbal.app.emp.mapper.EmpMapper">
    <insert id="insertEmpProc"  
            statementType="CALLABLE">
        {call employee_ins(
            #{firstName},
            #{lastName},
            #{email},
            #{hireDate},
            #{jobId},
            #{employeeId,mode=OUT,jdbcType=VARCHAR},
            #{msg, mode=OUT,jdbcType=VARCHAR}        
        ) }    
    </insert>

	<select id="getEmp" parameterType="com.dbal.app.emp.EmpVO" resultType="com.dbal.app.emp.EmpVO">
		SELECT  employee_id,
		        first_name,
				last_name,
				email,
				hire_date,
				job_id
		FROM employees
		WHERE employee_id = #{employeeId}
	</select>
	<select id="getEmpList" resultType="com.dbal.app.emp.EmpVO" >
		SELECT rownum id, e.* 
		  FROM employees e
		<where>  
		  <if test="departmentId != null">
		       department_id = #{departmentId}
		  </if>  
	      <if test="employeeId != null">
            and employee_id = #{employeeId}
          </if>  
          <if test="salary != null">
            <![CDATA[ and salary < #{salary} ]]>
          </if>    
          <if test="firstName != null">
            and upper(first_name) like '%' || upper(#{firstName}) || '%'
          </if> 
          <if test="employeeIds != null">
            and employee_id in  
                <foreach collection="employeeIds" item="id" 
                         open="(" close=")" separator=",">
                    #{id}
                </foreach>
          </if>      
        </where>	
		 ORDER BY first_name 
	</select>

	<insert id="insertEmp" parameterType="com.dbal.app.emp.EmpVO">
		INSERT INTO EMPLOYEES (	employee_id, 
								first_name, 
								last_name,
								email,
								hire_date,
								job_id,
								profile
								)
	 	                VALUES(
	 	               			( select nvl(max(employee_id),0)+1 from employees ),
	 	               			#{firstName},
	 	               			#{lastName},
	 	               			#{email},
	 	               			#{hireDate},
	 	               			#{jobId},
	 	               			#{profile}
	 	               			)
	</insert>
	
	<select id="getName" resultType="string" parameterType="integer">
       SELECT first_name from employees where employee_id = #{value}
    </select>
    
	<select id="getCnt" resultType="int">
	   SELECT count(*) from employees
	</select>
	
	<select id="getEmpMap" resultType="map">
       SELECT * from employees order by first_name
    </select>
    
    <select id="getDeptEmpCnt" resultType="map">
        select nvl(to_char(department_id), 'no') "name" , 
               count(*)      "cnt"
          from employees
          
        group  by department_id
    </select>
<!-- 
	<update id="updateSomething" parameterType="#modelname">
		UPDATE tablename1
		SET
		columnname1=#{param1}
		WHERE
		columnname2 = #{param2}
	</update>

	<delete id="deleteSomething" parameterType="int">
		DELETE FROM tablename1 WHERE
		columnname1 = #{param1}
	</delete> -->
</mapper>
